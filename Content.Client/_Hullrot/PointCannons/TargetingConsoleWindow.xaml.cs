using Content.Client.Computer;
using Content.Client.UserInterface.Controls;
using Content.Shared.Shuttles.BUIStates;
using Content.Shared._Hullrot.PointCannons;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Content.Client.Shuttles.UI;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface;

namespace Content.Client._Hullrot.PointCannons;

[GenerateTypedNameReferences]
public sealed partial class TargetingConsoleWindow : FancyWindow, IComputerWindow<ShuttleBoundUserInterfaceState>
{
    public ShuttleNavControl Radar => NavRadar;
    public Action<string>? OnCannonGroupChange;

    public TargetingConsoleWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    public void UpdateState(TargetingConsoleBoundUserInterfaceState state)
    {
        NavRadar.UpdateState(state.NavState);
        NavRadar.UpdateState(state.IFFState);

        if (state.CannonGroups != null)
            UpdateGroupSelector(state.CannonGroups);
    }

    public void UpdateGroupSelector(List<string> groups)
    {
        CannonGroupSelectorBox.DisposeAllChildren();

        foreach (string groupName in groups)
        {
            Button groupButton = new();
            groupButton.Text = string.Concat(char.ToUpper(groupName[0]), groupName.Substring(1)); //capitalized name
            groupButton.OnPressed += (_) =>
            {
                OnCannonGroupChange?.Invoke(groupName);
            };
            CannonGroupSelectorBox.AddChild(groupButton);
        }
    }

    public void UpdateAmmoStatus(List<(int, int)> values)
    {
        AmmoStatusBox.DisposeAllChildren();
        foreach ((int value, int max) in values)
        {
            //funny, but it's important that max value is set before value
            //or it will get clamped to the default max of 100
            AmmoStatusBox.AddChild(new AmmoBar() { MaxValue = max, Value = value });
        }
    }
}
